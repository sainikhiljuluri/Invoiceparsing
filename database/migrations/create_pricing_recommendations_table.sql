-- Create pricing_recommendations table for storing suggested selling prices
-- This table stores pricing recommendations generated by the pricing calculator

CREATE TABLE IF NOT EXISTS pricing_recommendations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    invoice_id UUID REFERENCES invoices(id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(id) ON DELETE SET NULL,
    product_name TEXT NOT NULL,
    cost_price DECIMAL(10,2) NOT NULL,
    suggested_price DECIMAL(10,2) NOT NULL,
    min_price DECIMAL(10,2) NOT NULL,
    max_price DECIMAL(10,2) NOT NULL,
    markup_percentage DECIMAL(5,2) NOT NULL,
    category TEXT DEFAULT 'DEFAULT',
    confidence TEXT DEFAULT 'Medium',
    pricing_strategy TEXT,
    adjustments JSONB DEFAULT '[]'::jsonb,
    competitive_analysis JSONB DEFAULT '{}'::jsonb,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pricing_recommendations_invoice_id ON pricing_recommendations(invoice_id);
CREATE INDEX IF NOT EXISTS idx_pricing_recommendations_product_id ON pricing_recommendations(product_id);
CREATE INDEX IF NOT EXISTS idx_pricing_recommendations_product_name ON pricing_recommendations(product_name);
CREATE INDEX IF NOT EXISTS idx_pricing_recommendations_category ON pricing_recommendations(category);
CREATE INDEX IF NOT EXISTS idx_pricing_recommendations_is_active ON pricing_recommendations(is_active);
CREATE INDEX IF NOT EXISTS idx_pricing_recommendations_created_at ON pricing_recommendations(created_at);

-- Create unique constraint to prevent duplicate recommendations for same invoice+product
CREATE UNIQUE INDEX IF NOT EXISTS idx_pricing_recommendations_unique 
ON pricing_recommendations(invoice_id, product_name) 
WHERE is_active = true;

-- Add trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_pricing_recommendations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_pricing_recommendations_updated_at
    BEFORE UPDATE ON pricing_recommendations
    FOR EACH ROW
    EXECUTE FUNCTION update_pricing_recommendations_updated_at();

-- Add comments for documentation
COMMENT ON TABLE pricing_recommendations IS 'Stores suggested selling prices calculated by the pricing system';
COMMENT ON COLUMN pricing_recommendations.invoice_id IS 'Reference to the invoice that triggered this pricing calculation';
COMMENT ON COLUMN pricing_recommendations.product_id IS 'Reference to the product in the products table (if matched)';
COMMENT ON COLUMN pricing_recommendations.product_name IS 'Name of the product from the invoice';
COMMENT ON COLUMN pricing_recommendations.cost_price IS 'Cost price from the invoice';
COMMENT ON COLUMN pricing_recommendations.suggested_price IS 'AI-calculated suggested selling price';
COMMENT ON COLUMN pricing_recommendations.min_price IS 'Minimum recommended selling price';
COMMENT ON COLUMN pricing_recommendations.max_price IS 'Maximum recommended selling price';
COMMENT ON COLUMN pricing_recommendations.markup_percentage IS 'Calculated markup percentage';
COMMENT ON COLUMN pricing_recommendations.category IS 'Product category used for pricing rules';
COMMENT ON COLUMN pricing_recommendations.confidence IS 'Confidence level in the pricing recommendation';
COMMENT ON COLUMN pricing_recommendations.pricing_strategy IS 'Recommended pricing strategy';
COMMENT ON COLUMN pricing_recommendations.adjustments IS 'JSON array of pricing adjustments applied';
COMMENT ON COLUMN pricing_recommendations.competitive_analysis IS 'JSON object with competitor pricing data';
COMMENT ON COLUMN pricing_recommendations.is_active IS 'Whether this recommendation is currently active';
